@page "/"
@using MontyCarloHall.Shared;
@using Microsoft.Extensions.Logging;

<PageTitle>Monty Hall Problem - Monty Carlo Simulation</PageTitle>

<h1>Monty Hall Problem - Monty Carlo Simulation</h1>

<!--Run monty carlo simulation using the best choice (Random pick, Monty removes a non-winning door, player switches)
Run monty carlo simulation using the naive choice (Random pick, Monty removes a non-winning door, player stays)

-->

<EditForm Model="@montyHallModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputCheckbox id="chkPlayerStrategySwitch" aria-label="Player Strategy" aria-selected="true" @bind-Value="montyHallModel.PlayerStrategySwitch">Test</InputCheckbox>

    <button type="submit">Start</button>
</EditForm>

<div>
<textarea id="percentageWins" @bind="@montyHallModel.WinPercent">

</textarea>
</div>

<div>
<button id="stopSimulation" @onclick="stopSimulation">Stop</button>
</div>
@code {
    private MontyHallModel montyHallModel = new();
    private Random random = new Random(DateTime.Now.Millisecond); //could be better, but 1000 seeds is enough for this purpose
    private PeriodicTimer periodicTimer =  new PeriodicTimer(TimeSpan.FromMilliseconds(timerMilliseconds));
    private const int runsPerBatch = 1000;
    private const int timerMilliseconds = 1000;
  
    private async void HandleValidSubmit()
    {
        periodicTimer.Dispose();
        periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(timerMilliseconds));
        montyHallModel.Runs = 0;
        montyHallModel.Wins = 0;
        //Schedule recurring page refresh
        //Do Monty Carlo simulation until cancelled
        //Update page every x seconds with results

        while (await periodicTimer.WaitForNextTickAsync())
        {
            RunSimulationBatch();

            //Update the UI after every batch
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void RunSimulationBatch()
    {
        byte prizeDoor, initialPlayerChoice, montyReveals = 0, secondPlayerChoice = 0;

        for (int i = 0; i < runsPerBatch; i++)
        {
            byte[] doors = new byte[3] { 0, 0, 0 };
            prizeDoor = (byte)random.Next(2);
            initialPlayerChoice = (byte)random.Next(2);
            doors[prizeDoor] = 1; //flag winning door
            byte montysChoice = (byte)random.Next(1);

            //Monty eliminates a losing door. Let's randomize this in case it's having an unintended effect on the odds
            if (doors[0] == 1 && montysChoice == 0) {montyReveals = 1; }
            if (doors[0] == 1 && montysChoice == 1) {montyReveals = 2; }
            if (doors[1] == 1 && montysChoice == 0) {montyReveals = 0; }
            if (doors[1] == 1 && montysChoice == 1) {montyReveals = 2; }
            if (doors[2] == 1 && montysChoice == 0) {montyReveals = 0; }
            if (doors[2] == 1 && montysChoice == 1) {montyReveals = 1; }

            if (doors[0]==1 && montyReveals==1) { secondPlayerChoice = 1; }
            if (doors[0]==1 && montyReveals==2) { secondPlayerChoice = 2; }
            if (doors[1]==1 && montyReveals==1) { secondPlayerChoice = 0; }
            if (doors[1]==1 && montyReveals==2) { secondPlayerChoice = 2; }
            if (doors[2]==1 && montyReveals==1) { secondPlayerChoice = 0; }
            if (doors[2]==1 && montyReveals==2) { secondPlayerChoice = 1; }


            if (doors[secondPlayerChoice] == 1)
            {
                montyHallModel.Wins++;    
            }

            montyHallModel.Runs++;
        }
       
        montyHallModel.WinPercent = Math.Round(montyHallModel.Wins / montyHallModel.Runs, 3) * 100;

    }
    private void stopSimulation()
    {
        periodicTimer.Dispose();
    }
 }